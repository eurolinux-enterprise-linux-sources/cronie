diff -up cronie-1.4.4/anacron/runjob.c.commoncriteria cronie-1.4.4/anacron/runjob.c
--- cronie-1.4.4/anacron/runjob.c.commoncriteria	2009-09-25 08:23:18.000000000 +0200
+++ cronie-1.4.4/anacron/runjob.c	2011-02-21 13:48:33.662512450 +0100
@@ -43,7 +43,8 @@ temp_file(job_rec *jr)
 {
     const int max_retries = 50;
     char *name;
-    int fdin, fdout, i;
+    int fdin = -1;
+    int fdout, i;
 
     i = 0;
     name = NULL;
diff -up cronie-1.4.4/src/crontab.c.commoncriteria cronie-1.4.4/src/crontab.c
--- cronie-1.4.4/src/crontab.c.commoncriteria	2011-02-21 13:48:33.655512478 +0100
+++ cronie-1.4.4/src/crontab.c	2011-02-21 13:48:33.663512446 +0100
@@ -376,7 +376,7 @@ static void edit_cmd(void) {
 	(void) signal(SIGQUIT, SIG_IGN);
 
 	if (!glue_strings(Filename, sizeof Filename, tmp_path(),
-			"crontab.XXXXXXXXXX", '/')) {
+			"crontab.XXXXXX", '/')) {
 		fprintf(stderr, "path too long\n");
 		exit(ERROR_EXIT);
 	}
diff -up cronie-1.4.4/src/do_command.c.commoncriteria cronie-1.4.4/src/do_command.c
--- cronie-1.4.4/src/do_command.c.commoncriteria	2010-01-13 13:53:40.000000000 +0100
+++ cronie-1.4.4/src/do_command.c	2011-02-21 13:48:33.669512422 +0100
@@ -372,6 +372,9 @@ static void child_process(entry * e, use
 
 			/* get sender address.  this is MAILFROM if set (and safe),
 			 * root otherwise.
+			 * mailfrom is not freed because it lives only in this short
+			 * child process. Freeing could lead to segfaul, when mailfrom
+			 * is acquired from env_get function.
 			 */
 			if (!mailfrom || !*mailfrom || !safe_p(usernm, mailfrom)) {
 				mailfrom = calloc(5, sizeof (char));
diff -up cronie-1.4.4/src/security.c.commoncriteria cronie-1.4.4/src/security.c
--- cronie-1.4.4/src/security.c.commoncriteria	2010-01-13 13:54:37.000000000 +0100
+++ cronie-1.4.4/src/security.c	2011-02-21 13:49:56.600188696 +0100
@@ -286,18 +286,21 @@ cron_get_job_range(user * u, security_co
 		if (!(ccon = context_new(u->scontext))) {
 			log_it(u->name, getpid(), "context_new FAILED for MLS_LEVEL",
 				range, 0);
+			context_free(ccon);
 			return -1;
 		}
 
 		if (context_range_set(ccon, range)) {
 			log_it(u->name, getpid(),
 				"context_range_set FAILED for MLS_LEVEL", range, 0);
+			context_free(ccon);
 			return -1;
 		}
 
 		if (!(*ucontextp = context_str(ccon))) {
 			log_it(u->name, getpid(), "context_str FAILED for MLS_LEVEL",
 				range, 0);
+			context_free(ccon);
 			return -1;
 		}
 
